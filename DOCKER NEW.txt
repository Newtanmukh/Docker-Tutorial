sudo systemctl status docker : will give u the status of the docker.
			       you can check the Active : thing to see whether it is active or inactive

sudo systemctl enable --now docker : start and enable the docker.

				if it doesnt start, then reboot your OS.

sudo docker run hello-world : 

sudo docker images : will list you the number of images we have here.

sudo docker version. : docker client and docker server. docker is running in a virutal machine,which is linux.

sudo docker run hello-world : will pull this image from internet.










DOCKER :

docker is a tool for running applications in an isolated environment.
very similar to VM, faster,doesnt require whole OS and memory.
app run in the same environment.
standard for software deployment.


CONTAINER :

a container doesnt require the whole OS. 
multiple containers can run on the same machine and can share the OS kernel with other containers.
 each running as isolated processes.
 
 
 VIRTUAL MACHINES :
 
 VMs are an abstraction of physical hardware turning one server into many servers.
 hypervisor in VM turn one server into many servers.
 The hypervisor allows many VMs to run on a single machine.
 each VM includes a full copy of the OS, the application, the necessary binaries and the libraries.taking up tens of GB. 
 VMs are slow to boot.
 
 
 
 
 
 Benefits of using docker :
 * Run container in seconds instead of minutes
 * less resources less disk space.
 * uses less memory
 * does not need full OS
 * Deployment
 * Testing.
 
 
 
 
 
 
 
 IMAGE :
 image is a template for creating an environment of your choice.
 an image has everything you need to run your apps.
 OS,software as well as app code.
 
 
 CONTAINER :
 it is running instance of an image.
 




docker images : will show u the list of images we have downloaded.



DOCKER HUB is the place from where you can download docker images.


	1) docker images : will show u the list of images we have on our pc.
	2) docker ps : will list all running docker containers.
	3) docker ps -a : will show the list of both, the container which are running as  well as the ones which have stopped running. 
	4) docker container ls : will show all the currently running containers.
	5) docker container ls -a : similar to docker ps -a.
	6) docker run -d nginx:latest    :   run container in background mode and print the running container id.
	7) docker stop container_id : will stop the container.
	8) docker run -d -p 8080:80 nginx:latest     :      connects the localhost port 8080 to the port 80 of the container.     ### the thing is that from the host, we should be able to give a 		request to  the container which is running on port 80.
	9) docker run -d -p 8080:80 -p 9000:80 nginx:latest    :   from both te ports 8080 and 9000 we can access this running contianer. now we know how to map ports from hosts to containers.
	10) docker start container_id / container_name : will restart the stopped container once again.
	11) docker CMD --help    :   will list the available options.   e.g = docker ps --help.
	12) docker rm container_name / container_id    :    will delete the container permanently. you will never get to see it back/restart it ever again.
	13) docker rm $(docker ps -aq)    :    will delete all the containers (this will only work if no container is running.)
	14) docker rm $(docker ps -q)     : will only delete the running containers.
	15) docker rm -f $(docker ps -aq)   : will remove all containers forcefully.
	16) docker run --name test -p 8080:80 -p 9000:80 nginx:latest       :       name of this container is test, and it will run on two ports.
	17) docker rm -f container_name/container_id     :     will forcefully delete the container, even if it is running.
	18) docker run --name website -v $(pwd)/website:/usr/share/nginx/html:ro -d -p 8080:80 nginx:latest              :              share static files from host to container.(remove ro to allow read and write mode both.)
	19) docker exec -it container_name/container_id bash      :     go inside the container in bash mode.    after that, go to cd /usr/share/nginx/html.
	20) docker run --name test --volumes-from website -d -p 8081:80 nginx:latest             :            share VOLUMES Between containers.
	21) docker images -a -q  :  will show only the list of the docker images ID.
	22) docker rmi image_id : will delete the particular image ID. 
	23) docker rmi $(docker images -a -q)    : will delete all the images.
	24) docker ps --format=$FORMAT
	25) docker ps --format=$FORMAT
	26) 	example of dockerfile : 
	
		FROM node:latest
		WORKDIR /app               
		ADD . .
		RUN npm install
		CMD node index.js
	27)

VOLUMES :
docker volumes allow us to share data between host and containers as well as between containers.


DOCKERFILE :                         //NOTE: we never build an image from scracth. we always use an existing image and we do the configuration on top of it.
	FROM : this will be used to specify the base image name.
	







container is running,it will expose a port (generally it is 80 . )





						DOCKER NETWORKING  :
								
								
	docker networking allows a container to connect to as many networks as he/she likes.
	docker networks are used to provide complete isolation for docke containers.
	
	docker networking is a pluggable type of subsystem.
	lots of drivers which can be used to setup containers among the network host.	
	execute the command docker info, and under the Plugins network, you will get to see the list of plugins supported.
	
	three networks get automatically created when we create configure and install docker on the virtual machine.
	Type the command : docker network ls to see the list of networks available,
	
	28) docker network ls : will show u the list of network here.
	
	the three networks are:
	bridge
	host
	none
	
	BRIDGE : is the default network driver which is chosen.
	NONE : containers entire networking is disabled. it cant communicate to any container on that host.
	HOST : when the container completely replicates the hosts network stack and starts behaving as if it is the host itself. whatever will be the IP address of the host, will be the IP address of the container in case of host networking.
	
	inter bride communication is not possible in regular docker.
	bridge network created by default.this bride is created on the linux level. it is named as docker0.
	we can create multiple containers on this bridge.
	when the default bridge got created, it had a subnet associated with it and gateway IP address.
	from that subnet, the container on that bridge will get an IP Address.
	e.g. : if subnet is 172.17.0.0  , gateway will take 172.17.0.1, next containers will take 172.17.0.2 , ...3 etc etc.
	docker daemon has an ethernet interface marked as eth0.  
	whenever a packet comes to the interface,it will fall on the bridge and from there it will go to the container.
	containers in same bridge can communicate to each other.
	
	
	eth0 is the default interface of the docker host machine.(or docker interface is only having one interface internet card.)
	docker0 is the bridge by default which is created.
	
	
	we can create our custom bridges as well. and on that we can create our own containers.
	in one docker host all containers should have a unique name.
	communication across networks is not there.
	
	bridge-utils : using this package we can use some bridge related commabds.
	
	29) brctl show              :            will show all the bridges in this docker host.
	30) docker exec -it container_id bash   :   will take u inside the container in execution mode.
	
	31) docker network inspect network_name  :   if u want to see more details associated with this network. how many containers are running inside it,etc.
	
	two containers are running inside the network, and they have two different ethernet interfaces and IP address  associated with the network.
	
	
	after u exec inside one of the running container, u can easily ping the other contianer running in the same network using : ping ip, where ip is the ip address of the other container.
	(NOTE : before u can ping, do type apt-get update , as well as , apt-get install iputils-ping)
	
	32) docker create network network_name     :    will create a new network whose name is 'network_name'. (NOTE : u can check it using the command, docker network ls.)
	
	33) docker run -dt --network network_name ubuntu bash     :    will create this continer of ubuntu, under the network of 'network_name' .
	
	
	
	
	



	
