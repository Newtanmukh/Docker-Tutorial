sudo systemctl status docker : will give u the status of the docker.
			       you can check the Active : thing to see whether it is active or inactive

sudo systemctl enable --now docker : start and enable the docker.

				if it doesnt start, then reboot your OS.

sudo docker run hello-world : 

sudo docker images : will list you the number of images we have here.

sudo docker version. : docker client and docker server. docker is running in a virutal machine,which is linux.

sudo docker run hello-world : will pull this image from internet.


why should we use docker?
1) get required software
2) cannot install on this machine/requires python 3.8
3) troubleshoot. re run installer. then, we get another error. again we go to 2), and we find out that we need another framework again. this keeps going on.

docker says that, contarize it.
there will be a container which will have its own resources and software.that will run the software. dockerize/containerize.
guaranteed to run. isolated environment having its own resources/software.


docker client is the command line(CLI). it will ask the docker output for the commands etc.
docker server can communicate directly with the client. docker daemon is a service that runs on your host operating ssystem. it is responsible for running containers.

Image : image is like a seed and a file. it has all the information and data inside to make a tree. no resources has been assigned till now.
container : is like a full grown tree. it is what is produced from the image.




containers are a way to package application with all the necessary dependencies and configuration.
it is a portable artifact,can be easily shared and moved around.
makes development easy.

container live in container repository.

public repo for docker containers. docker hub for the docker images.

depeing on OS, it might look different.

with container, you wont have to install any of the dependencies on your OS, cause container itself act like a layer of its own operating system.

setting up local dev env becomes easy/

we can have different versions running simultaneously with out any conflict.

container made up of layers of image. linux base image, small in size.
top of base,u will have application image.


docker run postgres:9.6
docker ps = show running containers
different version might have some layer common.




	DOCKER vs VIRTUAL MACHINE :
	
     OS has two layers, OS layer and applications layer.
     docker virtualizes application layer only 
     virtual machine virtualizes both application as well as OS layer. VM virtualizes whole OS.
     size of docker images much smaller.
     docker run and start much faster
     VM of any OS can run on other OS.
     linux based image might not run on windows. docker toolbox to solve this image. it abstracts away the kernel to make sure that hosts can run different docker images.

container is running environment for image.

sudo docker images : will show the imaoges installed her
sudo docker pull image_name : will pull the image from the docker hub.
sudo docker run image_name : will run the image called image_name.
sudo docker run -d redis : run in background
sudo docker stop docker_id : will stop the container.
sudo docker ps -a : will show all the conntainers which are running or not running. exit as well.
sudo docker start docker_id : will start the docker.
sudo docker run redis 4.0 as well as 4.1 : two different versions of image run differently.

multiple contianes on same host.

docker run -p6000:6379 redis
laptop(host) 6000 port is binded to container 6379 port.
docker run -p6000:6379 redis:4.0          : will give error saying that port is allocated,

docker logs docker_id/docker_name : give history of the contaainer.
docker run -d -p6001:6379 --name redis-older redis:4.0 : name of the container will be redis-older

namespacing : isolation of reources by process
control groups : limit resources per process

container will have own memory,hard disk,cpu etc.

IMAGE SNAPSHOTS : 
	fs snapshot : /bin/lib/chrome
	startup command : command.exe

Kernel will allocate some space in the hard disk for the fs snapshot. the startup command will start it.


docker run busybox cmd : will run the command cmd inside the image busybox. this will be startup command.


docker run = docker create + docker start





docker create hello : will create a docker named hello, will give the container string.

docker start -a output_string : -a will show the ouput as well. -a will attach to container and give out put to the terminal


docker kill docker_id : will forcefully close it.

docker exec -i -t docker_id sh : shell will start. can input commands like ls , cat etc. -i will vasically say that like we can take in the input command as well as show out the output command as well.
-i will attach to STDIN.

dockerfile contains all the info for running all files in base container (like ubuntu)

HOW to CREATE CUSTOM IMAGE ?
1) choose base image (like ubuntu)
2) run commands for your software
3) specify the base command to be run at startup.






example of DOCKERFILE :

#step1 specify the base image
FROM alpine

#Download and install dependencies
RUN apk add -- update redis

#Setup the startup command
CMD["redis-server"]











     












	