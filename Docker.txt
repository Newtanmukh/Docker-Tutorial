sudo systemctl status docker : will give u the status of the docker.
			       you can check the Active : thing to see whether it is active or inactive

sudo systemctl enable --now docker : start and enable the docker.

				if it doesnt start, then reboot your OS.

sudo docker run hello-world : 

sudo docker images : will list you the number of images we have here.

sudo docker version. : docker client and docker server. docker is running in a virutal machine,which is linux.

sudo docker run hello-world : will pull this image from internet.


why should we use docker?
1) get required software
2) cannot install on this machine/requires python 3.8
3) troubleshoot. re run installer. then, we get another error. again we go to 2), and we find out that we need another framework again. this keeps going on.

docker says that, contarize it.
there will be a container which will have its own resources and software.that will run the software. dockerize/containerize.
guaranteed to run. isolated environment having its own resources/software.


docker client is the command line(CLI). it will ask the docker output for the commands etc.
docker server can communicate directly with the client. docker daemon is a service that runs on your host operating ssystem. it is responsible for running containers.

Image : image is like a seed and a file. it has all the information and data inside to make a tree. no resources has been assigned till now.
container : is like a full grown tree. it is what is produced from the image.




containers are a way to package application with all the necessary dependencies and configuration.
it is a portable artifact,can be easily shared and moved around.
makes development easy.

container live in container repository.

public repo for docker containers. docker hub for the docker images.

depeing on OS, it might look different.

with container, you wont have to install any of the dependencies on your OS, cause container itself act like a layer of its own operating system.

setting up local dev env becomes easy/

we can have different versions running simultaneously with out any conflict.

container made up of layers of image. linux base image, small in size.
top of base,u will have application image.


docker run postgres:9.6
docker ps = show running containers
different version might have some layer common.




	DOCKER vs VIRTUAL MACHINE :
	
     OS has two layers, OS layer and applications layer.
     docker virtualizes application layer only 
     virtual machine virtualizes both application as well as OS layer. VM virtualizes whole OS.
     size of docker images much smaller.
     docker run and start much faster
     VM of any OS can run on other OS.
     linux based image might not run on windows. docker toolbox to solve this image. it abstracts away the kernel to make sure that hosts can run different docker images.

container is running environment for image.

sudo docker images : will show the imaoges installed her
sudo docker pull image_name : will pull the image from the docker hub.
sudo docker run image_name : will run the image called image_name.
sudo docker run -d redis : run in background
sudo docker stop docker_id : will stop the container.
sudo docker ps -a : will show all the conntainers which are running or not running. exit as well.
sudo docker start docker_id : will start the docker.
sudo docker run redis 4.0 as well as 4.1 : two different versions of image run differently.

multiple contianes on same host.

docker run -p6000:6379 redis
laptop(host) 6000 port is binded to container 6379 port.
docker run -p6000:6379 redis:4.0          : will give error saying that port is allocated,

docker logs docker_id/docker_name : give history of the contaainer.
docker run -d -p6001:6379 --name redis-older redis:4.0 : name of the container will be redis-older

namespacing : isolation of reources by process
control groups : limit resources per process

container will have own memory,hard disk,cpu etc.

IMAGE SNAPSHOTS : 
	fs snapshot : /bin/lib/chrome
	startup command : command.exe

Kernel will allocate some space in the hard disk for the fs snapshot. the startup command will start it.


docker run busybox cmd : will run the command cmd inside the image busybox. this will be startup command.


docker run = docker create + docker start





docker create hello : will create a docker named hello, will give the container string.

docker start -a output_string : -a will show the ouput as well. -a will attach to container and give out put to the terminal


docker kill docker_id : will forcefully close it.

docker exec -i -t docker_id sh : shell will start. can input commands like ls , cat etc. -i will vasically say that like we can take in the input command as well as show out the output command as well.
-i will attach to STDIN.

dockerfile contains all the info for running all files in base container (like ubuntu)

HOW to CREATE CUSTOM IMAGE ?
1) choose base image (like ubuntu)
2) run commands for your software
3) specify the base command to be run at startup.






example of DOCKERFILE :

#step1 specify the base image
FROM alpine

#Download and install dependencies
RUN apk add -- update redis

#Setup the startup command
CMD["redis-server"]


docker build .
docker run docker_id



Docker is not a container. Actually Docker is company that offers containerization service. And container is isolated environment  that stores all your setup files(related to your product) and can give it to any of your client for  testing/deployment purpose in the form of docker image.

::::::  DIFFERENCE DOCKER AND VIRTUAL MACHINE :::::

container is isolated env for running an application.
virtual machine is abstraction of a machine.(having its own OS and all that)
several virtual machines on a real physical machine.
two VM on a single machine using a hypervisor. hypervisor is a software to create and manage VMs.
example of hypervisor is virtualbox.
each VM needs a full-blwon OS, slow to start, entire OS has to be loaded. needs a chunk of RAM,hardware and all that.
VM is resource intensive. 
all containers share OS of the host.





a docker runs with all its dependencies inside the container itself. so even if we delete the whole docker thing,
the dependencies and software will be deleted. we wont have to worry this way about other dependencies that are installed globally,
because in case of global dependencies, we might have to worry about like if other applications are using the dependencies installed globally or not.
containerization is indeed a good thing.
docker has a client server architecture.
client talks to server using REST API.docker server sits on the background and takes care of building and running the container.
container share OS/kernel of the host. container is like a process.

on linux machine we can run linux containers. on windows we can run both linux and windows containers.





application : dockerize it.dockerfile is a plain text that docker uses to package up this application into image.
	      the image has everything that we can use to run. container has its own file system provided by image.
	      
	      image containes :
		* cut-down OS
		* a runtime environment like Node
		* application files
		* third party libraries
		* environment variables.


Dockerfile :

FROM node:alpine   (base image. can be FROM linux as well)
COPY . /app     (copy all files into the directory.)
WORKDIR /app
CMD node app.js
     


docker build -t hello-docker . : -t stands for tag, the last thing to specify which particular directory to convert to image. pcakage our application.
docker images/docker image ls : show the list of images in this computer.
docker run hello-docker : 







##################################################################################################################################

less resources,less memory, do not need full OS, run container in seconds. deployment and testing as well.

docker container ls/docker ps : see the list of all running containers.
docker run -d nginx:latest : in detachted mode.


container exposes a port. from the host, we want to send a request to the container.
docker stop docker_id : stop the container.

docker run -d -p 8080:80 nginx:latest : localhost 8080 to port 80 inside the conatiner. then go to the localhost:8080.
docker ps -a : list of all containers.
docker ps --help : will show u all the optuions.

docker rm container_id : will delete the container.
docker ps -aq : will give us the IDs of all the containers.
docker rm $(docker ps -aq) : will remove all the containers, however, ensure that none of them are running. before deleting them, stop them.

docker rm -f $(docker ps -aq) : forced remove

docker run --name website -d -p 3000:80 8080:80 nginx:latest    :   name of the docker will be website. it will be easier to identify by name then
docker stop website/docker_id.

docker ps --format="something" : will give the details in  a nice format.
another way to see in formatted mode : 
				       export FORMAT= ...
				       docker ps --format=$FORMAT

docker volume allows sharing of data. allow to share data between host and container






DATA SHARING TO INSIDE CONTAINER : VOULME

1)go to inside the folder from where u want to share the files to inside of the container.
2)type this command    =>   docker run --name website -v $(pwd):/usr/share/nginx/html:ro -d -p 8080:80 nginx : will 
3) mount this website folder to our container.

docker rub --name website -v $(pwd):/usr/share/nginx/html -d -p 8080:80 nginx : hosting some static content inside the nginx.

docker exec -it website bash : will take u inside the container named "bash".
			       ls inside bash, will show u all the contents inside the container.


VOLUME BETWEEN CONTAINERS : 

docker run --name website-copy --volumes-from containr_from_name -d -p 8080:80 nginx : from second container to the first container volume will be mapped.




BUILD OWN IMAGES :

use dockerfile to create own images. dockerfile steps to create images.
docker images should contain dependencies, source files etc.

inside the root of the folder, create a Dockerfile.




dockerfile :
FROM nginx:latest
ADD . /usr/share/nginx/html

type this command : docker build --help => list of commands to use while buiilding docker file
command =>

  docker build --tag website:latest .   

   => in the last u will have to mention the location of the docker file. so u see the '.' ,it is on current directory so.
Name is 'website', version is 'latest'
now simply type docker image ls to see this docker list as well.

then simply run,
docker run --name website -p 8080:80 -d website:latest


EXAMPLE of DOCKERFILE  of NodeJS :

FROM node:latest
WORKDIR /app   =>     (if a folder named app already exists , its good otherwise create one)
ADD . .             =>add all the files in this current directory  to inside the app folder.
RUN npm install
CMD node index.js









	